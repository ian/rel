{"version":3,"sources":["../src/loadListeners.js","../src/server.js","../src/generateGQLClient.js","../src/generateGQLServer.js","../src/index.ts"],"sourcesContent":["import RedisStreamHelper from \"redis-stream-helper\"\nimport fs from \"fs\"\nimport path from 'path'\nimport * as fsWalk from '@nodelib/fs.walk'\nconst {\n  listenForMessages,\n  createStreamGroup,\n  addListener,\n  addStreamData,\n  client,\n} = RedisStreamHelper(process.env.REDIS_PORT, process.env.REDIS_HOST)\nimport { packageDirectorySync } from 'pkg-dir'\nimport Logger from '@ptkdev/logger'\nconst logger = new Logger({\n  debug: !!process.env.REL_DEBUG\n})\n\nconst dir = packageDirectorySync()\nconst listeners = {}\nconst files = fsWalk.walkSync(dir + '/listeners', {entryFilter: entry => entry.name.endsWith('.js')})\n\nfor(let i = 0; i < files.length; i++) {\n    const file = files[i]\n    const streamKey = `rel:${file.path.replace(dir + \"/listeners/\", \"\").replace(\"/\"+file.name, \"\")}:${path.basename(file.name, '.js')}`\n    listeners[streamKey] = await import(file.path)\n    await createStreamGroup(streamKey)\n    addListener(streamKey)\n    logger.info(\"Found a listener for the stream key: \" + streamKey, \"INIT\")\n}\n\nconst run = () => {\n  listenForMessages((key, streamId, data) => {\n    if(listeners[key]) {\n        listeners[key].default(key, streamId, data)\n    }\n  }).then(run)\n}\n\nexport default run","import loadListeners from \"./loadListeners.js\";\nimport AltairFastify from \"altair-fastify-plugin\";\nimport generateGQLClient from \"./generateGQLClient.js\";\nimport generateGQLServer from \"./generateGQLServer.js\";\nimport { packageDirectorySync } from \"pkg-dir\";\nimport Fastify from \"fastify\";\nimport goTrace from \"@go-trace/tracer\";\nimport Logger from \"@ptkdev/logger\";\nimport fastifyCors from \"fastify-cors\";\nimport * as yoga from \"graphql-yoga\";\n\nexport default () => {\n  const logger = new Logger({\n    debug: !!process.env.REL_DEBUG,\n  });\n\n  const port = Number(process.env.REL_PORT) || 4000;\n  const host = process.env.REL_HOST || \"localhost\";\n  const app = Fastify();\n  const dir = packageDirectorySync();\n\n  app.register(fastifyCors);\n  app.register(AltairFastify, {\n    /**\n     * All these are the defaults.\n     */\n    path: \"/altair\",\n    baseURL: \"/altair/\",\n    endpointURL: \"/graphql\",\n    decorateReply: false,\n  });\n\n  // make sure you have redis running on localhost:6379 or change process.env.REDIS_HOST and process.env.REDIS_PORT\n\n  const { schema, contextCreator } = generateGQLServer();\n\n  logger.info(`Schema generated at ${dir + \"/schema\"}`, \"INIT\");\n\n  const graphQLServer = new yoga.GraphQLServer({\n    schema,\n    context: contextCreator,\n    enableLogging: false,\n  });\n\n  if (process.env.REL_TRACE) {\n    logger.info(\"Tracer enabled at http://localhost:2929\", \"INIT\");\n  }\n\n  app.route({\n    url: \"/graphql\",\n    method: [\"GET\", \"POST\", \"OPTIONS\"],\n    handler: async (req, reply) => {\n      let response;\n      if (process.env.REL_TRACE && req.headers.accept !== \"text/event-stream\") {\n        const hasQuery = Object.keys(req.query).length > 0;\n        response = await goTrace(\n          schema,\n          hasQuery ? req.query.query : req.body.query,\n          null,\n          contextCreator(),\n          hasQuery ? JSON.parse(req.query.variables) : req.body.variables\n        );\n        reply.status(200);\n        reply.send(response);\n      } else {\n        response = await graphQLServer.handleIncomingMessage(req);\n        response.headers.forEach((value, key) => {\n          reply.header(key, value);\n        });\n        reply.status(response.status);\n        reply.send(response.body);\n      }\n    },\n  });\n\n  app.listen({ port, host });\n\n  logger.info(`Rel Server started in http://${host}:${port}`, \"INIT\");\n  logger.info(\n    `Svelte example enabled at http://${host}:${port}/svelte`,\n    \"INIT\"\n  );\n  logger.info(\n    `Altair GraphQL Client enabled at http://${host}:${port}/altair`,\n    \"INIT\"\n  );\n\n  loadListeners();\n  generateGQLClient();\n  logger.info(`GraphQL Client generated at ${dir + \"/gql-client\"}`, \"INIT\");\n  return app;\n};\n","import { generate } from '@genql/cli'\nimport fs from 'fs'\nimport { packageDirectorySync } from 'pkg-dir'\n\nconst dir = packageDirectorySync()\n\nexport default () => {\n  generate({\n    schema: fs\n      .readFileSync(dir + '/schema/schema.graphql')\n      .toString(),\n    output: dir + '/gql-client'\n  }).catch(console.error)\n}\n","import { buildGraphbackAPI, createCRUDService } from 'graphback'\nimport { createRedisGraphProvider } from 'runtime-redisgraph'\nimport { SchemaCRUDPlugin } from '@graphback/codegen-schema'\nimport fs from 'fs'\nimport { packageDirectorySync } from 'pkg-dir'\nimport { RedisPubSub } from 'graphql-redis-subscriptions'\n\nconst dir = packageDirectorySync()\n\nexport default () => {\n  const dataProviderCreator = createRedisGraphProvider()\n  const schema_ = fs.readFileSync(dir + '/schema.graphql')\n  const { typeDefs, resolvers, schema, services, contextCreator } = buildGraphbackAPI(schema_.toString(), {\n    dataProviderCreator,\n    serviceCreator: createCRUDService({\n      pubSub: new RedisPubSub()\n    }),\n    plugins: [\n      new SchemaCRUDPlugin({\n        outputPath: dir + '/schema/schema.graphql'\n      })\n    ]\n  })\n  return { typeDefs, schema, resolvers, services, contextCreator }\n}\n","import Server from \"./server\";\nexport default Server;\n"],"mappings":"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","names":[]}