directive @unique on FIELD_DEFINITION

directive @relation(type: String!, direction: RelDirection!) on FIELD_DEFINITION

directive @transient on FIELD_DEFINITION

directive @default(value: String!) on FIELD_DEFINITION

directive @computed(value: String!) on FIELD_DEFINITION

directive @constraint(minLength: Int, maxLength: Int, startsWith: String, endsWith: String, contains: String, notContains: String, pattern: String, format: String, min: Float, max: Float, exclusiveMin: Float, exclusiveMax: Float, multipleOf: Float) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

input CreatePostInput {
  title: String!
  author: ID!
}

input CreatePostRelationInput {
  title: String!
}

input CreateUserInput {
  name: String!
  posts: [CreatePostRelationInput]
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
}

input IntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int!]
  between: [Int!]
}

input MutatePostInput {
  title: String
  author: ID
  _id: ID
}

input MutatePostRelationInput {
  title: String
  _id: ID
}

input MutateUserInput {
  name: String
  posts: [MutatePostRelationInput]
  _id: ID
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: MutateUserInput!): User
  updateUsers(filter: UserFilter, input: MutateUserInput!): UserMutationResultList
  deleteUser(_id: ID!): User
  deleteUsers(filter: UserFilter): UserMutationResultList
  createPost(input: CreatePostInput!): Post
  updatePost(input: MutatePostInput!): Post
  updatePosts(filter: PostFilter, input: MutatePostInput!): PostMutationResultList
  deletePost(_id: ID!): Post
  deletePosts(filter: PostFilter): PostMutationResultList
}

input OfPostInput {
  of: PostFieldsEnum
}

input OfUserInput {
  of: UserFieldsEnum
}

input PageRequest {
  limit: Int
  offset: Int
}

type Post {
  title: String!
  author: User!
  _id: ID
  count(of: OfPostInput, distinct: Boolean): Int
  createdAt: Timestamp
  updatedAt: Timestamp
}

enum PostFieldsEnum {
  _id
  title
  createdAt
  updatedAt
}

input PostFilter {
  title: StringInput
  author: UserFilter
  _id: IDInput
  and: [PostFilter!]
  or: [PostFilter!]
  not: PostFilter
  createdAt: TimestampInput
  updatedAt: TimestampInput
}

type PostMutationResultList {
  items: [Post]!
}

input PostOrderByInput {
  field: PostFieldsEnum
  order: SortDirectionEnum = ASC
}

type PostResultList {
  items: [Post]!
  offset: Int
  limit: Int
  count: Int
}

input PostSubscriptionFilter {
  and: [PostSubscriptionFilter!]
  or: [PostSubscriptionFilter!]
  not: PostSubscriptionFilter
  title: StringInput
  _id: IDInput
  count: IntInput
}

type Query {
  getUser(_id: ID!): User
  findUsers(filter: UserFilter, page: PageRequest, orderBy: [UserOrderByInput]): UserResultList!
  getPost(_id: ID!): Post
  findPosts(filter: PostFilter, page: PageRequest, orderBy: [PostOrderByInput]): PostResultList!
}

enum RelDirection {
  IN
  OUT
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newUser(filter: UserSubscriptionFilter): User!
  updatedUser(filter: UserSubscriptionFilter): User!
  deletedUser(filter: UserSubscriptionFilter): User!
  newPost(filter: PostSubscriptionFilter): Post!
  updatedPost(filter: PostSubscriptionFilter): Post!
  deletedPost(filter: PostSubscriptionFilter): Post!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input TimestampInput {
  ne: Timestamp
  eq: Timestamp
  le: Timestamp
  lt: Timestamp
  ge: Timestamp
  gt: Timestamp
  in: [Timestamp!]
  between: [Timestamp!]
}

type User {
  name: String!
  posts: [Post]
  _id: ID
  count(of: OfUserInput, distinct: Boolean): Int
  createdAt: Timestamp
  updatedAt: Timestamp
}

enum UserFieldsEnum {
  _id
  name
  createdAt
  updatedAt
}

input UserFilter {
  name: StringInput
  posts: PostFilter
  _id: IDInput
  and: [UserFilter!]
  or: [UserFilter!]
  not: UserFilter
  createdAt: TimestampInput
  updatedAt: TimestampInput
}

type UserMutationResultList {
  items: [User]!
}

input UserOrderByInput {
  field: UserFieldsEnum
  order: SortDirectionEnum = ASC
}

type UserResultList {
  items: [User]!
  offset: Int
  limit: Int
  count: Int
}

input UserSubscriptionFilter {
  and: [UserSubscriptionFilter!]
  or: [UserSubscriptionFilter!]
  not: UserSubscriptionFilter
  name: StringInput
  _id: IDInput
  count: IntInput
}
