{"version":3,"sources":["../src/index.ts","../src/buildGraphbackAPI.ts","../src/GraphbackGenerator.ts","../src/loadPlugins.ts"],"sourcesContent":["export * from '@graphback/core'\nexport * from './buildGraphbackAPI'\nexport * from './GraphbackConfig'\nexport * from './GraphbackGenerator'\n","import { GraphQLSchema } from 'graphql'\nimport { ServiceCreator, DataProviderCreator, GraphbackPlugin, GraphbackPluginEngine, GraphbackCRUDGeneratorConfig, printSchemaWithDirectives, ModelDefinition, GraphbackServiceConfigMap, GraphbackContext, createCRUDService, GraphbackDataProvider, GraphbackCRUDService } from '@graphback/core'\nimport { SchemaCRUDPlugin, SCHEMA_CRUD_PLUGIN_NAME } from '@graphback/codegen-schema'\nimport { mergeSchemas } from '@graphql-tools/merge'\nimport { PubSub } from 'graphql-subscriptions'\n\nexport interface GraphbackAPIConfig {\n  /**\n   * Global CRUD configuration\n   */\n  crud?: GraphbackCRUDGeneratorConfig\n  /**\n   * Schema plugins to perform automatic changes to the schema\n   */\n  plugins?: GraphbackPlugin[]\n\n  /**\n   * Function which creates a default CRUD Service for every data model\n   */\n  serviceCreator?: ServiceCreator\n\n  /**\n   * Function which creates a default data provicer for every data model\n   */\n  dataProviderCreator: DataProviderCreator\n}\n\n/**\n * Defines the individual components created in the Graphback API\n */\nexport interface GraphbackAPI {\n  /**\n   * GraphQL schema as a string\n   */\n  typeDefs: string\n  /**\n   * GraphQL schema object\n   */\n  schema: GraphQLSchema\n  /**\n   * CRUD resolvers for every data model\n   */\n  resolvers: Record<string, any>\n  /**\n   * Model:Service map of CRUD services for every data model\n   */\n  services: GraphbackServiceConfigMap\n\n  /**\n   * Creates context to be attached to the running server\n   */\n  contextCreator: (context?: any) => GraphbackContext\n}\n\nexport type GraphbackServiceCreator = (model: ModelDefinition, dataProvider: GraphbackDataProvider) => GraphbackCRUDService\nexport type GraphbackDataProviderCreator = (model: ModelDefinition) => GraphbackDataProvider\n\nasync function createServices (models: ModelDefinition[], createService: Promise<GraphbackServiceCreator>, createProvider: GraphbackDataProviderCreator) {\n  const services: GraphbackServiceConfigMap = {}\n\n  for (const model of models) {\n    const modelType = model.graphqlType\n    const modelProvider = createProvider(model)\n    const modelService = await createService(model, modelProvider)\n    services[modelType.name] = modelService\n  }\n\n  return services\n}\n\ninterface PluginMap { [name: string]: GraphbackPlugin}\n\nfunction getPlugins (plugins?: GraphbackPlugin[]): GraphbackPlugin[] {\n  const pluginsMap: PluginMap = plugins?.reduce((acc: PluginMap, plugin: GraphbackPlugin) => {\n    if (acc[plugin.getPluginName()]) {\n      // eslint-disable-next-line no-console\n      console.debug(`Plugin ${plugin.getPluginName()} is already defined and will be overridden`)\n    }\n\n    acc[plugin.getPluginName()] = plugin\n\n    return acc\n  }, {}) || {}\n\n  let schemaPlugin: GraphbackPlugin\n\n  if (pluginsMap[SCHEMA_CRUD_PLUGIN_NAME]) {\n    schemaPlugin = pluginsMap[SCHEMA_CRUD_PLUGIN_NAME]\n    /* eslint-disable-next-line */\n    delete pluginsMap[SCHEMA_CRUD_PLUGIN_NAME]; // remove the crud schema plugin as it will be added as first entry.\n  }\n\n  return [\n    schemaPlugin || new SchemaCRUDPlugin(),\n    ...Object.values(pluginsMap)\n  ]\n}\n\n/**\n * Creates all of the components needed for the GraphQL server - resolvers, schema and services.\n *\n * @param {GraphQLSchema|string} model - Data model as a string or GraphQL schema. Used to generate the Graphback API resolvers, services and database\n * @param {GraphbackAPIConfig} config\n * @param {GraphbackServiceCreator} [config.serviceCreator] - Creator class specifying which default CRUD service should be created for each model.\n * @param {GraphbackDataProviderCreator} config.dataProviderCreator - Creator class specifying which default database provider should be created for each model.\n * @param {GraphbackCRUDGeneratorConfig} [config.crud] - Global CRUD configuration for the Graphback API.\n * @param {GraphbackPlugin[]} [config.plugins] - Schema plugins to perform automatic changes to the generated schema\n *\n * @returns {GraphbackAPI} Generated schema, CRUD resolvers and services\n */\nexport async function buildGraphbackAPI (model: string | GraphQLSchema, config: GraphbackAPIConfig): GraphbackAPI {\n  const schemaPlugins: GraphbackPlugin[] = getPlugins(config.plugins)\n\n  const pluginEngine = new GraphbackPluginEngine({\n    schema: model,\n    plugins: schemaPlugins,\n    config: { crudMethods: config.crud }\n  })\n\n  const metadata = pluginEngine.createResources()\n  const models = metadata.getModelDefinitions()\n\n  // Set a default ServiceCreator in the event the config does not have one\n  const serviceCreator = config.serviceCreator || createCRUDService({ pubSub: new PubSub() })\n\n  const services = await createServices(models, serviceCreator, config.dataProviderCreator)\n  const contextCreator = (context: any) => {\n    return {\n      ...context,\n      graphback: services\n    }\n  }\n\n  const resolvers = metadata.getResolvers()\n\n  // merge resolvers into schema to make it executable\n  const schemaWithResolvers = mergeSchemas({ schemas: [metadata.getSchema()], resolvers })\n\n  const typeDefs = printSchemaWithDirectives(schemaWithResolvers)\n\n  return {\n    schema: schemaWithResolvers,\n    typeDefs,\n    resolvers,\n    services,\n    contextCreator\n  }\n}\n","import { GraphbackPluginEngine } from '@graphback/core'\nimport { GraphQLSchema } from 'graphql'\nimport { loadPlugins } from './loadPlugins'\nimport { GraphbackConfig } from './GraphbackConfig'\n\n/**\n * GraphbackGenerator\n *\n * Automatically generate your database structure resolvers and queries from graphql types.\n * See README for examples\n */\nexport class GraphbackGenerator {\n  protected config: GraphbackConfig\n  protected schema: string | GraphQLSchema\n\n  public constructor (schema: GraphQLSchema | string, config: GraphbackConfig) {\n    this.schema = schema\n    this.config = config\n  }\n\n  /**\n   * Create backend with all related resources\n   */\n  public generateSourceCode () {\n    const plugins = loadPlugins(this.config.plugins)\n    const pluginEngine = new GraphbackPluginEngine({\n      schema: this.schema,\n      plugins,\n      config: { crudMethods: this.config.crud }\n    })\n\n    pluginEngine.createResources()\n  }\n}\n","/* eslint-disable @typescript-eslint/no-var-requires */\nimport { GraphbackPlugin } from '@graphback/core'\n\ninterface PluginDefaultProps {\n  packageName?: string\n}\n\ninterface PluginConfigMap {\n  [pluginName: string]: PluginConfig\n}\n\ninterface PluginConfig extends PluginDefaultProps {\n  [key: string]: any\n}\n\nexport function loadPlugins (pluginConfigMap: PluginConfigMap): GraphbackPlugin[] {\n  if (!pluginConfigMap) {\n    return []\n  }\n\n  const pluginInstances = []\n  for (const pluginLabel of Object.keys(pluginConfigMap)) {\n    let pluginName = pluginLabel\n    if (pluginLabel.startsWith('graphback-')) {\n      // Internal graphback plugins needs rename\n      pluginName = pluginLabel.replace('graphback-', '@graphback/codegen-')\n    }\n    const packageName = pluginConfigMap[pluginLabel].packageName\n    // override package name\n    if (packageName) {\n      pluginName = packageName\n    }\n\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-require-imports\n      const plugin = require(pluginName)\n      if (plugin.Plugin) {\n        const config = pluginConfigMap[pluginLabel]\n        pluginInstances.push(new plugin.Plugin(config))\n      } else {\n        // eslint-disable-next-line no-console\n        console.log(`${pluginName} plugin is not exporting 'Plugin' class`)\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(`${pluginName} plugin missing in package.json`, e)\n    }\n  }\n\n  return pluginInstances\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACCA;AACA;AACA;AACA;AAqDA,8BAA+B,QAA2B,eAAiD,gBAA8C;AACvJ,QAAM,WAAsC;AAE5C,aAAW,SAAS,QAAQ;AAC1B,UAAM,YAAY,MAAM;AACxB,UAAM,gBAAgB,eAAe;AACrC,UAAM,eAAe,MAAM,cAAc,OAAO;AAChD,aAAS,UAAU,QAAQ;AAAA;AAG7B,SAAO;AAAA;AAKT,oBAAqB,SAAgD;AACnE,QAAM,aAAwB,oCAAS,OAAO,CAAC,KAAgB,WAA4B;AACzF,QAAI,IAAI,OAAO,kBAAkB;AAE/B,cAAQ,MAAM,UAAU,OAAO;AAAA;AAGjC,QAAI,OAAO,mBAAmB;AAE9B,WAAO;AAAA,KACN,QAAO;AAEV,MAAI;AAEJ,MAAI,WAAW,0BAA0B;AACvC,mBAAe,WAAW;AAE1B,WAAO,WAAW;AAAA;AAGpB,SAAO;AAAA,IACL,gBAAgB,IAAI;AAAA,IACpB,GAAG,OAAO,OAAO;AAAA;AAAA;AAgBrB,iCAAyC,OAA+B,QAA0C;AAChH,QAAM,gBAAmC,WAAW,OAAO;AAE3D,QAAM,eAAe,IAAI,sBAAsB;AAAA,IAC7C,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,QAAQ,EAAE,aAAa,OAAO;AAAA;AAGhC,QAAM,WAAW,aAAa;AAC9B,QAAM,SAAS,SAAS;AAGxB,QAAM,iBAAiB,OAAO,kBAAkB,kBAAkB,EAAE,QAAQ,IAAI;AAEhF,QAAM,WAAW,MAAM,eAAe,QAAQ,gBAAgB,OAAO;AACrE,QAAM,iBAAiB,CAAC,YAAiB;AACvC,WAAO,iCACF,UADE;AAAA,MAEL,WAAW;AAAA;AAAA;AAIf,QAAM,YAAY,SAAS;AAG3B,QAAM,sBAAsB,aAAa,EAAE,SAAS,CAAC,SAAS,cAAc;AAE5E,QAAM,WAAW,0BAA0B;AAE3C,SAAO;AAAA,IACL,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;;;ACjJJ;;;ACeO,qBAAsB,iBAAqD;AAChF,MAAI,CAAC,iBAAiB;AACpB,WAAO;AAAA;AAGT,QAAM,kBAAkB;AACxB,aAAW,eAAe,OAAO,KAAK,kBAAkB;AACtD,QAAI,aAAa;AACjB,QAAI,YAAY,WAAW,eAAe;AAExC,mBAAa,YAAY,QAAQ,cAAc;AAAA;AAEjD,UAAM,cAAc,gBAAgB,aAAa;AAEjD,QAAI,aAAa;AACf,mBAAa;AAAA;AAGf,QAAI;AAEF,YAAM,SAAS,UAAQ;AACvB,UAAI,OAAO,QAAQ;AACjB,cAAM,SAAS,gBAAgB;AAC/B,wBAAgB,KAAK,IAAI,OAAO,OAAO;AAAA,aAClC;AAEL,gBAAQ,IAAI,GAAG;AAAA;AAAA,aAEV,GAAP;AAEA,cAAQ,IAAI,GAAG,6CAA6C;AAAA;AAAA;AAIhE,SAAO;AAAA;;;ADtCF,+BAAyB;AAAA,EACpB;AAAA,EACA;AAAA,EAEH,YAAa,QAAgC,QAAyB;AAC3E,SAAK,SAAS;AACd,SAAK,SAAS;AAAA;AAAA,EAMT,qBAAsB;AAC3B,UAAM,UAAU,YAAY,KAAK,OAAO;AACxC,UAAM,eAAe,IAAI,uBAAsB;AAAA,MAC7C,QAAQ,KAAK;AAAA,MACb;AAAA,MACA,QAAQ,EAAE,aAAa,KAAK,OAAO;AAAA;AAGrC,iBAAa;AAAA;AAAA;","names":[]}