## NOTE: This schema was generated by Rel and should not be changed manually

directive @model on OBJECT

directive @unique on FIELD_DEFINITION

directive @relation on FIELD_DEFINITION

directive @transient on FIELD_DEFINITION

directive @constraint(minLength: Int, maxLength: Int, startsWith: String, endsWith: String, contains: String, notContains: String, pattern: String, format: String, differsFrom: String, min: Float, max: Float, exclusiveMin: Float, exclusiveMax: Float, notEqual: Float) on ARGUMENT_DEFINITION | FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input CreateUserInput {
  name: String!
  email: String @constraint(format: "email")
  count: Int
}

input IDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  in: [ID!]
}

input IntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int!]
  between: [Int!]
}

input MutateUserInput {
  name: String
  email: String @constraint(format: "email")
  _id: ID
  count: Int
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: MutateUserInput!): User
  updateUsers(filter: UserFilter, input: MutateUserInput!): UserMutationResultList
  deleteUser(_id: ID!): User
  deleteUsers(filter: UserFilter): UserMutationResultList
}

input OfUserInput {
  of: UserFieldsEnum
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getUser(_id: ID!): User
  findUsers(filter: UserFilter, page: PageRequest, orderBy: [UserOrderByInput]): UserResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newUser(filter: UserSubscriptionFilter): User!
  updatedUser(filter: UserSubscriptionFilter): User!
  deletedUser(filter: UserSubscriptionFilter): User!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input TimestampInput {
  ne: Timestamp
  eq: Timestamp
  le: Timestamp
  lt: Timestamp
  ge: Timestamp
  gt: Timestamp
  in: [Timestamp!]
  between: [Timestamp!]
}

type User {
  name: String!
  email: String @constraint(format: "email")
  _id: ID
  count(of: OfUserInput, distinct: Boolean): Int
  createdAt: Timestamp
  updatedAt: Timestamp
}

enum UserFieldsEnum {
  _id
  name
  email
}

input UserFilter {
  name: StringInput
  email: StringInput @constraint(format: "email")
  _id: IDInput
  count: IntInput
  and: [UserFilter!]
  or: [UserFilter!]
  not: UserFilter
  createdAt: TimestampInput
  updatedAt: TimestampInput
}

type UserMutationResultList {
  items: [User]!
}

input UserOrderByInput {
  field: UserFieldsEnum
  order: SortDirectionEnum = ASC
}

type UserResultList {
  items: [User]!
  offset: Int
  limit: Int
  count: Int
}

input UserSubscriptionFilter {
  and: [UserSubscriptionFilter!]
  or: [UserSubscriptionFilter!]
  not: UserSubscriptionFilter
  name: StringInput
  email: StringInput
  _id: IDInput
  count: IntInput
}